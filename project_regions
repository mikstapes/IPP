#! /bin/bash

### This script takes a bed file and projects their centers from a reference to a query genome.

err() {
    echo -e "\nError occurred:"
    awk 'NR>L-4 && NR<L+4 { printf "%-5d%3s%s\n",NR,(NR==L?">>>":""),$0 }' L=$1 $0
	exit 1
}
trap 'err $LINENO' ERR

shopt -s extglob # expand wildcards

usage() {
cat << EOF
Usage: project_regions -b BEDFILE -r REFERENCE_SPECIES -t TARGET_SPECIES [optional: -h HALF_LIFE_DISTANCE -N NTHREADS -d DATA_DIR -o OUTDIR -T TARGET_BEDFILE -p PICKLED_PAIRWISE_AXTNETS -c DIRECT_ALIGNMENT_CHAIN -k KEEP_TMP_FOLDER]

OPTIONS:
   -b BEDFILE				Path to bedfile with coordinates to project from the reference to the target species.
   -r REFERENCE_SPECIES			Reference species (e.g. danRer11).
   -t TARGET_SPECIES			Target Species Build (e.g. mm39).
   -h HALF_LIFE_DISTANCE		Distance to anchor point at which the distance-score equals 0.5. Default: 10 kb.
   -N NTHREADS				Number of parallel threads to use
   -d DATA_DIR				Path to data directory containing the alignment/pkl folder. Default: .
   -o OUTDIR				Path to output directory.
   -T TARGET_BEDFILE			Path to a bedfile with equivalent regions in the target species used for the classification of functional conservation.
      	  				For example, if you are projecting predicted enhancers from species A to species B, you can specify a bedfile with predicted enhancers in species B.
   -p PICKLED_PAIRWISE_ALIGNMENTS	Path to a pickled file containing a dictionary of all pairwise alignments (previously converted to data frames and pickled using pickle_pwalns.py).
   -c DIRECT_ALIGNMENT_CHAIN		Path to a chain file for direct reference-target alignments.
   -k KEEP_TMP_FOLDER			Do not delete tmp folder with the single region projection files after completion
   -n DRY_RUN				Print commands, do not execute them
EOF
}

# parse arguments
half_life_distance=10000
data_dir=$(realpath .)
outdir=$(realpath .)
nthreads=1
while getopts ":b:r:t:h:N:d:o:T:p:c:kn" OPTION; do
	case $OPTION in
		b) bedfile=$(realpath $OPTARG) ;;
		r) reference=$OPTARG ;;
		t) target=$OPTARG ;;
		h) half_life_distance=$OPTARG ;;
		N) nthreads=$OPTARG ;;
		d) data_dir=$(realpath $OPTARG) ;;
		o) outdir=$(realpath $OPTARG) ;;
		T) target_bedfile=$(realpath $OPTARG) ;;
		p) pwaln_pkl=$(realpath $OPTARG) ;;
		c) chain=$(realpath $OPTARG) ;;
		k) keep_tmp=true ;;
		n) dry_run=true ;;
		?) usage; exit 1 ;;
 	esac
done

# prepend a "echo" before every command in case of a dry-run
[[ $dry_run ]] && cmd=echo || cmd=''

# throw error if not all mandatory arguments are passed
if [ -z ${bedfile+x} ] || [ -z ${reference+x} ] || [ -z ${target+x} ]; then
	usage; exit 1
fi

# if pwaln pkl was not passed, search existing based on reference and taret species
aln_dir=$data_dir/alignment
pkl_dir=$aln_dir/pkl
if [ -z ${pwaln_pkl+x} ]; then
	pwaln_pkl=$pkl_dir/${reference}.${target}.pwaln.pkl
	[[ ! -e $pwaln_pkl ]] && pwaln_pkl=$pkl_dir/${target}.${reference}.pwaln.pkl
	[[ ! -e $pwaln_pkl ]] && unset pwaln_pkl && echo -e "Did not find a collection of pairwise alignments (.pkl file) for this species pair at $pkl_dir.\nCreate one with a given selection of bridging species using the scripts in compute_pwalns/ or specify the correct location of your data folder containing the alignment/pkl subfolders (-d)." && exit 1
fi

# if chain was not passed, search existing based on reference and target species
chain_dir=$aln_dir/chain
mkdir -p $chain_dir
if [ -z ${chain+x} ]; then
	chain=$(echo $chain_dir/${reference}.${target}*all.pre.chain) # if multiple chains are present, take the netted *.all.pre.chain
	[[ ! -e $chain ]] && chain_arr=($(eval echo $chain_dir/${reference}.${target}*chain)) && chain=${chain_arr[0]} # if no *.all.pre.chain is found, take the first of any other chain files that match the pattern
	if [[ ! -e $chain ]]; then
		url_ucsc=http://hgdownload.soe.ucsc.edu/goldenPath/${reference}/vs${target^}/${reference}.${target}.all.chain.gz
		if wget -q --method=HEAD $url_ucsc; then wget -O $chain_dir/$reference.$target.all.chain.gz $url_ucsc; fi
	fi
	[[ ! -e $chain ]] && echo -e "Chain file for the pairwise alignment of this species pair neither found at ${chain_dir} nor at UCSC.\nProvide one using the -c flag." && exit 1
fi

# check if bed-file contains at least 4 columns and unique names in column 4
[[ $(awk '{print NF}' $bedfile | sort -nu | head -n 1) -lt 4 ]] && echo "Error: bed-file must contain at least 4 columns with the 4th being a unique ID / name." && exit 1
[[ $(cut -d$'\t' -f4 "$bedfile" | sort | uniq | wc -w) != $(< "$bedfile" wc -l) ]] && echo "Error: Names in column 4 of bed-file must be unique." && exit 1

mkdir -p $outdir $outdir/intermediate_files

# liftOver regions that are directly alignable
echo "Lifting over alignable regions"
[[ $dry_run ]] || cat $bedfile | awk -F"\t" -v OFS="\t" '{s=int(($3-$2)/2); $2+=s; printf "%s\t%.0f\t%.0f\t%s\n",$1,$2,$2+1,$4}' > ${bedfile}_centered # save region centers to prevent "partially deleted" in liftOver output
liftover_projections=$outdir/intermediate_files/$(sed -e "s/\.bed/\.${target}_liftover\.bed/" <<< $(basename $bedfile))
liftover_unmapped=$outdir/intermediate_files/$(sed -e "s/\.bed/\.${target}_liftover_unmapped\.bed/" <<< $(basename $bedfile))
$cmd liftOver ${bedfile}_centered $chain $liftover_projections $liftover_unmapped
$cmd sed -i '/^#/d' $liftover_unmapped # remove lines starting with '#' in the unmapped file for proper bed format
# [[ ( ! $dry_run && -e ${bedfile}_centered ) ]] && rm ${bedfile}_centered

# IPP non-alignable regions
echo "Projecting non-alignable regions"
tmp_dir=$outdir/intermediate_files/$(sed -e 's/bed/tmp/' <<< "$(basename $bedfile)")
$cmd mkdir -p $tmp_dir
[[ $(ls -la $tmp_dir | wc -l) > 0 ]] && echo "Previously calculated files in $tmp_dir will be reused. If that is not desired, delete the folder."
[[ $dry_run ]] && l=1 || l=$(< $liftover_unmapped wc -l)
ERT=$(printf "%.0f" "$(echo "1*$l/$nthreads" | bc)") # based on a estimated average runtime of 1 min per job
echo "Estimated runtime: $((ERT/60))h $(bc <<< $ERT%60)m"
sem_id="ipp_$(hostname)_${RANDOM}"
starttime=$(date -u '+%s')

ipp_projections=${outdir}/intermediate_files/$(basename $bedfile .bed).ipp
i=0
if [[ $dry_run ]]; then
	echo "project_dijkstra.py $reference $target 'coord' 'id' $half_life_distance $pwaln_pkl $tmp_dir -quiet (coord and id will be determined in actual run)"
else
	if [[ ! -e $ipp_projections ]]; then
		while IFS='' read -r LINE || [ -n "${LINE}" ]; do
			i=$((i+1))
			bed_row=($LINE)
			id=${bed_row[3]}
			p=$((i*100/l))
			printf "$(printf '=%.0s' $(seq 1 $((p/5)))) %-$(((100-p)/5))s| ($p%%)\r"
			[[ -f ${tmp_dir}/${id}.proj.tmp ]] && continue
			coord=${bed_row[0]}:$(($((${bed_row[1]}+${bed_row[2]}))/2)) # center of region
			# dry run: only print the command for the first region and then break the loop to prevent the terminal from flooding
			[[ $dry_run ]] && [[ $i -eq 1 ]] && echo "project_dijkstra.py $reference $target $coord $id $half_life_distance $pwaln_pkl $tmp_dir -quiet (ONLY FIRST IS PRINTED)" && break
			[[ $cmd == '' ]] && sem --id $sem_id -j${nthreads} project_dijkstra.py $reference $target $coord $id $half_life_distance $pwaln_pkl $tmp_dir -quiet
		done < $liftover_unmapped
		echo ''
	else
		echo "$ipp_projections exists and will not be overwritten." 
	fi
fi

$cmd sem --id $sem_id --wait # wait until all sem jobs are completed before moving on
endtime=$(date -u '+%s')
difftime=$(date -u --date @$((endtime-starttime)) '+%-Hh %-Mm %-Ss')
echo "Effective runtime: ${difftime}"

# concatenate tmp output files to one projection file, delete tmp files
echo "Concatenating temporary files and writing to ${ipp_projections}"
header=('coords_ref' 'coords_direct' 'coords_multi' 'score_direct' 'score_multi' 'ref_anchor_direct_left' 'ref_anchor_direct_right' 'ref_anchor_multi_left' 'ref_anchor_multi_right' 'qry_anchor_direct_left' 'qry_anchor_direct_right' 'qry_anchor_multi_left' 'qry_anchor_multi_right' 'bridging_species')
if [[ ! -e $ipp_projections ]]; then
	if [[ $dry_run ]]; then
		echo "cat ${tmp_dir}/*.proj.tmp > $ipp_projections"
	else
		( IFS=$'\t'; echo "${header[*]}" ) > $ipp_projections && sed -i '1s;^;\t;' $ipp_projections # add header to the output file and prepend a leading \t to the header
		ids=($(cut -f4 $liftover_unmapped))
		i=0
		for id in ${ids[@]}; do
			i=$((i+1))
			if [ -f "${tmp_dir}/${id}.proj.tmp" ]; then
				cat "${tmp_dir}/${id}.proj.tmp" >> $ipp_projections
			fi
		done
		[[ $keep_tmp == true ]] || rm -r $tmp_dir
	fi
fi

# save unmapped ids separately (independent of the slow concatenation step before)
ipp_unmapped=${ipp_projections}_unmapped
if [[ (! $dry_run && ! -e $ipp_unmapped ) ]]; then
	echo -n "" > $ipp_unmapped # empty the file if it already exists (don't print during dry_run)
	ids=($(cut -f4 $liftover_unmapped))
	ids_mapped=($(cut -f1 $ipp_projections))
	echo ${ids[@]} ${ids_mapped[@]} | tr ' ' '\n' | sort -V | uniq -u > $ipp_unmapped
fi

# merge with output from liftOver
echo "Merging projections from liftOver and IPP"
$cmd merge_liftover_and_ipp.py $reference $target $outdir $bedfile $liftover_projections $ipp_projections $ipp_unmapped

# classify conservation of the sequence (DC/IC/NC) and function (+/-, if target bed file is given)
echo "Classify conservation of projected regions"
projections_bedfile=$outdir/$(basename $bedfile .bed).${target}.bed
outfile=$outdir/$(basename $bedfile .bed).${reference}.bed
threshold=0.95
$cmd classify_conservation.R $reference $outfile $bedfile $projections_bedfile $chain $threshold $target_bedfile

echo "Done"
