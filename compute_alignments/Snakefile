import os, sys

# parse config dict entries to variables, e.g. a = d['a']. (data_dir, species_list)
data_dir = os.path.abspath('../ipp-data')
for k,v in config.items():
    exec(k + '=v')
    
# define directories
assembly_dir = data_dir + '/assembly'
alignment_dir = data_dir + '/alignment'
fasta_dir = data_dir + '/fasta'
lastdb_dir = alignment_dir + '/lastdb'
chain_dir = alignment_dir + '/chain'
maf_dir = alignment_dir + '/maf'
psl_dir = alignment_dir + '/psl'
bed_dir = alignment_dir + '/bed'
pwaln_dir = alignment_dir + '/pwaln'

# make directories
for dr in [assembly_dir, alignment_dir, fasta_dir, lastdb_dir, chain_dir, maf_dir, psl_dir, bed_dir, pwaln_dir]:
    if not os.path.exists(dr):
        os.makedirs(dr)

# define targets (if not passed). 
try:
    targets = target_list.split(',')
    species_list = []
except NameError:
    species_list=species_list.split(',')
    targets = [chain_dir + '/%s.%s.all.pre.chain' %(sp1,sp2) for sp1 in species_list for sp2 in species_list if not sp1 == sp2]
    if create_pwaln_collection:
        if qry is None: ## if no qry species is given, generate pwaln collection for every other species in the list != ref
            targets += [
                pwaln_dir + '/{}.{}.pwaln.bin'.format(ref, s)
                for s in species_list
                if not ref == s
            ]
        else:
            targets += ['{}/{}.{}.pwaln.bin'.format(pwaln_dir, ref, qry)]

### RULES ###

rule all:
    input:
        targets

rule collect_and_binarize_pwalns:
    input:
        [chain_dir + '/%s.%s.all.pre.chain' %(sp1,sp2) for sp1 in species_list for sp2 in species_list if not sp1 == sp2]
    output:
        '{pwaln_dir}/{species_pair}.pwaln.bin'
    params:
        chain_dir=chain_dir,
        assembly_dir=assembly_dir,
        species_list=','.join(species_list)
    shell:
        'collect_pwalns.py {params} {output}'
        
        
rule all_pre_chain:
    input:
        allchain=ancient('{chain_dir}/{s1}.{s2}.all.chain'),
        sizes_s1=ancient('%s/{s1}.sizes' %assembly_dir),
        sizes_s2='%s/{s2}.sizes' %assembly_dir
    output:
        '{chain_dir}/{s1}.{s2}.all.pre.chain'
    shell:
        'chainPreNet {input} {output}'

rule all_chain:
    input:
        axtchain=ancient('{basename}.axtChain')
    output:
        '{basename}.all.chain'
    shell:
        'chainMergeSort {input} > {output}'

rule axt_chain:
    input:
        psl=ancient('%s/{s1}.{s2}.psl' %psl_dir),
        twobit_s1=ancient('%s/{s1}.2bit' %assembly_dir),
        twobit_s2=ancient('%s/{s2}.2bit' %assembly_dir)
    output:
        '{chain_dir}/{s1}.{s2}.axtChain'
    shell:
        'axtChain -psl -linearGap=loose {input} {output} &> {output}.log'
        
rule maf_to_psl:
    input:
        ancient('%s/{species_pair}.maf' %maf_dir)
    output:
        '{psl_dir}/{species_pair}.psl'
    shell:
        'maf-convert psl {input} > {output}'

# lastal sometimes prepends the genome build as a prefix to the chromosome names (no idea why). replaces those occurrences.
rule lastal:
    input:
        prj=ancient('%s/{s1}.prj' %lastdb_dir),
        fa=ancient('%s/{s2}.fa' %fasta_dir),
        assembly_dir=ancient(assembly_dir)
    output:
        '{maf_dir}/{s1}.{s2}.maf'
    params:
        lastdb_prefix='%s/{s1}' %lastdb_dir
    threads:
        min(workflow.cores, 2)
    shell:
        '''
        lastal -P {threads} {params.lastdb_prefix} {input.fa} > {output}
        remove_species_prefix {input.assembly_dir} {output}
        '''

rule lastdb:
    input:
        ancient('%s/{species}.fa' %fasta_dir)
    output:
        '{lastdb_dir}/{species}.prj'
    params:
        prefix='{lastdb_dir}/{species}'
    threads:
        min(workflow.cores, 2)
    shell:
        'lastdb -P {threads} -c {params.prefix} {input}'
        
rule twobit_to_sizes:
    input:
        ancient('{basename}.2bit')
    output:
        '{basename}.sizes'
    shell:
        'twoBitInfo {input} stdout | sort -k2rn > {output}'

rule fa_to_twobit:
    input:
        ancient('%s/{species}.fa' %fasta_dir)
    output:
        '{assembly_dir}/{species}.2bit'
    shell:
        'faToTwoBit {input} {output}'
    
rule get_USCS_fasta:
    output:
        '{fasta_dir}/{species}.fa'
    params:
        link='http://hgdownload.cse.ucsc.edu/goldenpath/{species}/bigZips/{species}.fa.gz'
    shell:
        'wget -nc {params.link} -O /dev/stdout | gzip -d > {output}'
